fun main() {
    // Problem
    // 정수 X가 주어질 때 정수 X에 사용할 수 있는 연산은 다음과 같이 4가지이다.
    // (a) X가 5로 나누어떨어지면, 5로 나눈다.
    // (b) X가 3으로 나누어떨어지면, 3으로 나눈다.
    // (c) X가 2로 나누어떨어지면, 2로 나눈다.
    // (d) X에서 1을 뺀다.
    // 정수 X가 주어졌을 때, 연산 4개를 적절히 사용해서 1을 만들려고 한다.
    // 연산을 사용하는 횟수의 최솟값을 출력하라.

    // 정수 X를 입력받기
    val x = readLine()!!.toInt()

    // 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
    val d = arrayListOf<Int>()
    (0..30000).map { d.add(0) }

    // 다이나믹 프로그래밍 진행(보텀업)
    for (i in 2..x) {
        // 현재의 수에서 1을 빼는 경우
        d[i] = d[i - 1] + 1
        // 현재의 수가 2로 나누어 떨어지는 경우
        if (i % 2 == 0) {
            d[i] = min(d[i], d[i / 2] + 1)
        }
        // 현재의 수가 3으로 나누어 떨어지는 경우
        if (i % 3 == 0) {
            d[i] = min(d[i], d[i / 3] + 1)
        }
        // 현재의 수가 5로 나누어 떨어지는 경우
        if (i % 5 == 0) {
            d[i] = min(d[i], d[i / 5] + 1)
        }
    }

    print(d[x])

    // Solution
    // 점화식 : ai = min(ai-1, ai/2, ai/3, ai/5) + 1
}
